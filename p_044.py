# https://projecteuler.net/problem=44


# Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2.
# The first ten pentagonal numbers are:
# 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

# It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference,
#   70 − 22 = 48, is not pentagonal.

# Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
#   difference are pentagonal and D = |Pk − Pj| is minimised;
#   what is the value of D?


def main():
    def is_pent(p):
        """Test by using inverse of n * (3 * n - 1) / 2"""
        n = (1 + (24 * p + 1) ** 0.5) / 6
        return int(n) == n

    k = 1
    answer = 0
    found = False
    while not found:
        p_k = k * (3 * k - 1) // 2
        for j in range(k - 1, 0, -1):
            p_j = j * (3 * j - 1) // 2

            if k - j == 1 and p_k - p_j >= answer and answer != 0:
                found = True
                break
            if p_k - p_j >= answer and answer != 0:
                break

            if is_pent(p_k - p_j) and is_pent(p_k + p_j):
                answer = (
                    p_k - p_j if not answer or p_k - p_j < answer else answer
                )

        k += 1

    print(answer)


if __name__ == "__main__":
    main()
